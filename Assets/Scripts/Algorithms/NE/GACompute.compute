#define MATRIX_THREAD_COUNT_X 8
#define MATRIX_THREAD_COUNT_Y 8
#define MATRIX_THREAD_COUNT_Z 8

#pragma kernel forward_pass_ReLU
#pragma kernel forward_pass_Tanh
#pragma kernel forward_pass_softmax
#pragma kernel forward_pass_linear

#pragma kernel GA_backwards_pass_full
#pragma kernel GA_set_new_population_full

// Made for compatability
#pragma kernel backwards_pass_ReLU_inputs
#pragma kernel backwards_pass_ReLU_weights_biases_Adam
#pragma kernel backwards_pass_Tanh_inputs
#pragma kernel backwards_pass_Tanh_weights_biases_Adam
#pragma kernel backwards_pass_softmax_inputs
#pragma kernel backwards_pass_softmax_weights_biases_Adam
#pragma kernel backwards_pass_linear_inputs
#pragma kernel backwards_pass_linear_weights_biases_Adam

unsigned int input_column_size;
unsigned int input_row_size;
unsigned int weights_row_size;

StructuredBuffer<float> input;
RWStructuredBuffer<float> weights;
RWStructuredBuffer<float> biases;
RWStructuredBuffer<float> output;

unsigned int population_weight_row_size;

float forward_pass_GA(uint3 id, StructuredBuffer<float> input, RWStructuredBuffer<float> weights,
                      RWStructuredBuffer<float> biases);

// ReLU forward
[numthreads(MATRIX_THREAD_COUNT_X, MATRIX_THREAD_COUNT_Y,1)]
void forward_pass_ReLU(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= input_column_size || id.y >= weights_row_size)
        return;

    const float result = forward_pass_GA(id, input, weights, biases);
    output[id.x * weights_row_size + id.y] = result < 0.0f ? 0.0f : result;
}

// Tanh forward
[numthreads(MATRIX_THREAD_COUNT_X, MATRIX_THREAD_COUNT_Y,1)]
void forward_pass_Tanh(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= input_column_size || id.y >= weights_row_size)
        return;

    output[id.x * weights_row_size + id.y] = tanh(forward_pass_GA(id, input, weights, biases));
}

// Linear forward
[numthreads(MATRIX_THREAD_COUNT_X,MATRIX_THREAD_COUNT_Y,1)]
void forward_pass_linear(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= input_column_size || id.y >= weights_row_size)
        return;

    output[id.x * weights_row_size + id.y] = forward_pass_GA(id, input, weights, biases);
}

[numthreads(MATRIX_THREAD_COUNT_X,1,1)]
void forward_pass_softmax(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= input_column_size)
        return;

    const int start_index = id.x * weights_row_size;
    
    float sum = 0.0f;
    float max_value = -3.402823466e+38f;
    
    for (unsigned int i = 0; i < weights_row_size; ++i)
    {
        max_value = max(max_value, output[start_index + i]);
    }
    for (unsigned int j = 0; j < weights_row_size; ++j)
    {
        const int index = start_index + j;
        const float result = exp(output[index] - max_value);
        output[index] = result;
        sum += result;
    }
    for (unsigned int m = 0; m < weights_row_size; ++m)
    {
        output[start_index + m] /= sum;
    }
}

struct crossover
{
    unsigned int parent_one;
    unsigned int parent_two;
    unsigned int crossover_point;
};

StructuredBuffer<crossover> crossover_info;
RWStructuredBuffer<float> weights_temp;
RWStructuredBuffer<float> biases_temp;
StructuredBuffer<float> weights_mutation_noise;
StructuredBuffer<float> biases_mutation_noise;

[numthreads(MATRIX_THREAD_COUNT_X,MATRIX_THREAD_COUNT_Y,MATRIX_THREAD_COUNT_Z)]
void GA_backwards_pass_full(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= input_row_size || id.y >= weights_row_size || id.z >= input_column_size) return;

    const crossover tmp_crossover = crossover_info[id.z];
    const int parent_index = id.y < tmp_crossover.crossover_point ? tmp_crossover.parent_one : tmp_crossover.parent_two;

    const int column_index = id.x * population_weight_row_size;
    const int weight_index = column_index + id.z * weights_row_size + id.y;

    weights_temp[weight_index] = weights[column_index + parent_index * weights_row_size + id.y] +
        weights_mutation_noise[weight_index];

    if (id.x == 0)
    {
        const int bias_index = id.z * weights_row_size + id.y;
        biases_temp[bias_index] = biases[parent_index * weights_row_size + id.y] + biases_mutation_noise[bias_index];
    }
}

[numthreads(MATRIX_THREAD_COUNT_X,MATRIX_THREAD_COUNT_Y,MATRIX_THREAD_COUNT_Z)]
void GA_set_new_population_full(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= input_row_size || id.y >= weights_row_size || id.z >= input_column_size) return;

    const int individual_index = id.z * weights_row_size;
    
    const int weight_index = id.x * population_weight_row_size + individual_index + id.y;
    weights[weight_index] = weights_temp[weight_index];

    if (id.x == 0)
    {
        const int bias_index = individual_index + id.y;
        biases[bias_index] = biases_temp[bias_index];
    }
}

inline float forward_pass_GA(uint3 id, StructuredBuffer<float> input, RWStructuredBuffer<float> weights,
                             RWStructuredBuffer<float> biases)
{
    const int input_column_index = id.x * input_row_size;
    const int current_child = id.x * weights_row_size;

    float result = 0;
    for (unsigned int i = 0; i < input_row_size; ++i)
    {
        const int population_weight_column_index = i * population_weight_row_size;
        result += input[input_column_index + i] * weights[population_weight_column_index + current_child + id.y];
    }

    return result + biases[current_child + id.y];
}

//Here just for compatability with the neural network library
[numthreads(MATRIX_THREAD_COUNT_X,MATRIX_THREAD_COUNT_Y,1)]
void backwards_pass_ReLU_weights_biases_Adam(uint3 id : SV_DispatchThreadID)
{
}
[numthreads(MATRIX_THREAD_COUNT_X,MATRIX_THREAD_COUNT_Y,1)]
void backwards_pass_Tanh_weights_biases_Adam(uint3 id : SV_DispatchThreadID)
{
}[numthreads(MATRIX_THREAD_COUNT_X,MATRIX_THREAD_COUNT_Y,1)]
void backwards_pass_softmax_weights_biases_Adam(uint3 id : SV_DispatchThreadID)
{
}
[numthreads(MATRIX_THREAD_COUNT_X,MATRIX_THREAD_COUNT_Y,1)]
void backwards_pass_linear_weights_biases_Adam(uint3 id : SV_DispatchThreadID)
{
}
[numthreads(MATRIX_THREAD_COUNT_X,MATRIX_THREAD_COUNT_Y,1)]
void backwards_pass_ReLU_inputs(uint3 id : SV_DispatchThreadID)
{
}
[numthreads(MATRIX_THREAD_COUNT_X,MATRIX_THREAD_COUNT_Y,1)]
void backwards_pass_Tanh_inputs(uint3 id : SV_DispatchThreadID)
{
}[numthreads(MATRIX_THREAD_COUNT_X,MATRIX_THREAD_COUNT_Y,1)]
void backwards_pass_softmax_inputs(uint3 id : SV_DispatchThreadID)
{
}
[numthreads(MATRIX_THREAD_COUNT_X,MATRIX_THREAD_COUNT_Y,1)]
void backwards_pass_linear_inputs(uint3 id : SV_DispatchThreadID)
{
}

// GA update, made obsolete by using the same functions while also using Z
//#pragma kernel GA_set_new_population
//#pragma kernel GA_backwards_pass
// [numthreads(MATRIX_THREAD_COUNT_X,MATRIX_THREAD_COUNT_Y,1)]
// void GA_backwards_pass(uint3 id : SV_DispatchThreadID)
// {
//     const int weight_index = id.x * population_weight_row_size + id.y;
//
//     if (id.x < input_row_size && id.y < population_weight_row_size)
//     {
//         const int current_child = id.y / weights_row_size;
//         const crossover tmp_crossover = crossover_info[current_child];
//         const unsigned int row_normalized = id.y % weights_row_size;
//         const int parent_index = row_normalized < tmp_crossover.crossover_point
//                                      ? tmp_crossover.parent_one
//                                      : tmp_crossover.parent_two;
//
//         const int column_index = id.x * population_weight_row_size;
//         weights_temp[weight_index] = weights[column_index + parent_index * weights_row_size + row_normalized] +
//             weights_mutation_noise[weight_index];
//
//         if (id.x == 0)
//         {
//             biases_temp[id.y] = biases[parent_index * weights_row_size + row_normalized] + biases_mutation_noise[id.y];
//         }
//     }
// }
// [numthreads(MATRIX_THREAD_COUNT_X,MATRIX_THREAD_COUNT_Y,1)]
// void GA_set_new_population(uint3 id : SV_DispatchThreadID)
// {
//     if (id.x >= input_row_size || id.y >= population_weight_row_size)
//         return;
//
//     const int weight_index = id.x * population_weight_row_size + id.y;
//     weights[weight_index] = weights_temp[weight_index];
//     if (id.x == 0)
//     {
//         biases[id.y] = biases_temp[id.y];
//     }
// }
